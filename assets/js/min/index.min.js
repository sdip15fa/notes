let usernotes,
  edittimeout,
  ready = !1,
  id = localStorage.id,
  url = "https://api-notes.wcyat.me";
const alerthtml = document.getElementById("alert");
function sleep(e) {
  return new Promise((t) => setTimeout(t, e));
}
function link() {
  const e = document.createElement("p");
  (e.id = "link"),
    (e.innerHTML = `Share this note by url: <a href="${
      window.location.href.split("?")[0]
    }?id=${id}">${window.location.href.split("?")[0]}?id=${id}</a>`),
    document.getElementById("root").appendChild(e);
}
async function alertmessage(e, t) {
  const n = alerthtml;
  (n.innerHTML = t),
    (n.className = e),
    document.body.insertBefore(n, document.querySelector("h1").nextSibling),
    await sleep(5e3),
    document.getElementById("alert").remove(),
    (localStorage.alerted = !0);
}
async function newnote(e) {
  let t = 1;
  for (; null !== tinymce.get(`${t}`); t++);
  if (t > 2)
    return (
      (window.location.href += "#"),
      await alertmessage(
        "alert alert-danger",
        "Sorry, you can only create two notes due to a limitation from tinymce."
      ),
      void (window.location.href = window.location.href.replace("#", ""))
    );
  const n = document.createElement("div");
  (n.innerHTML = `<br><textarea id="${t}" rows="10" name="note">${e}</textarea>\n</div>`),
    document
      .getElementById("root")
      .insertBefore(n, document.getElementById("btn")),
    tinymce.init({
      selector: "textarea",
      init_instance_callback: function (e) {
        e.on("Paste Change input Undo Redo", () => {
          clearTimeout(edittimeout),
            (edittimeout = setTimeout(() => {
              usercreate(e.id);
            }, 500));
        });
      },
    });
}
function logout() {
  delete localStorage.k,
    delete localStorage.username,
    localStorage.alerted && delete localStorage.alerted,
    window.location.replace(
      `${window.location.href.split("?")[0]}?logout=successful`
    );
}
function getvar(e) {
  const t = window.location.search.substring(1).split("&");
  for (const n of t) {
    const t = n.split("=");
    if (t[0] === e) return t[1];
  }
  return !1;
}
function usercreate(e) {
  usernotes || (usernotes = { key: localStorage.k }),
    (usernotes[e] = tinymce.get(e).getContent()),
    axios
      .post(`${url}/notes/users/${localStorage.k}`, usernotes)
      .then(function (e) {
        console.log(e.data);
      })
      .catch(function () {
        alertmessage("404 not found");
      });
}
async function anon() {
  (await getvar("id")) && ((id = await getvar("id")), (localStorage.id = id)),
    void 0 === id
      ? await axios
          .get("https://notes.wcyat.me/idgenerator")
          .then(function (e) {
            (id = e.data), (localStorage.id = id);
          })
      : (await axios.get(`${url}/get/${id}`).then(function (e) {
          tinymce.get("note").setContent(e.data.text);
        }),
        link()),
    (ready = !0);
}
function createnote(e) {
  const t = { id: id, text: e };
  axios
    .post(`${url}/create`, t)
    .then(function (e) {
      console.log(e);
    })
    .catch(function (e) {
      console.log(e);
    }),
    null === document.getElementById("link") && link();
}
async function testserver(e) {
  let t = !1;
  return (
    await axios
      .get(`${e}/testconnection`)
      .then((e) => {
        t = !0;
      })
      .catch(() => {}),
    t
  );
}
async function init() {
  for (i of ((urllist = [
    "https://api-notes.wcyat.me",
    "https://notes-server.wcyat.me",
    "https://api.notes.wcyat.me",
  ]),
  urllist))
    if (await testserver(i)) {
      url = i;
      break;
    }
  if (
    ((getvar("signedin") ||
      getvar("signup") ||
      getvar("signin") ||
      getvar("logout")) &&
      (localStorage.alerted
        ? window.location.replace(window.location.href.split("?")[0])
        : alertmessage(
            getvar("signedin") ? "alert alert-warning" : "alert alert-success",
            getvar("signedin")
              ? `You are already signed in as ${localStorage.username}.`
              : getvar("logout")
              ? "Successfully logged out."
              : `Successfully signed ${getvar("signup") ? "up" : "in"} as ${
                  localStorage.username
                }.`
          )),
    localStorage.username && localStorage.k)
  ) {
    (document.getElementById("header").innerHTML =
      '<button\n    style="margin-top: 10px; margin-right: 10px"\n    class="btn btn-secondary float-end"\n    onclick="logout()"\n  >\n    Log out\n  </button>'),
      document.getElementById("note").remove(),
      tinymce.EditorManager.execCommand("mceRemoveEditor", !0, "note");
    const e = document.createElement("div");
    (e.className = "delta"),
      (e.id = "btn"),
      (e.innerHTML =
        "<button class=\"btn btn-primary\" onclick=newnote('')>Create</button>"),
      document.getElementById("root").appendChild(e),
      axios.get(`${url}/notes/users/${localStorage.k}`).then(function (e) {
        for (i in e.data) newnote(e.data[i]);
        (usernotes = e.data), (usernotes.key = localStorage.k);
      });
  } else anon();
}
init();
